#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes :comments org

#+TITLE: Emacs configuration file
#+AUTHOR: Austin Walker

* Refile
  Stuff that I'm still playing around with.

  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell :ensure t
      :init
      ;;(exec-path-from-shell-initialize)
      (exec-path-from-shell-copy-env "SVN_REPO"))

    (add-hook 'text-mode-hook #'bug-reference-mode)
    (add-hook 'prog-mode-hook #'bug-reference-prog-mode)

    (use-package helm-org-rifle
      :ensure t)

    (use-package abbrev
      :diminish abbrev-mode
      :config
      (if (file-exists-p abbrev-file-name)
          (quietly-read-abbrev-file)))

    ;; (use-package auctex)
    (use-package latex-pretty-symbols :ensure t)
    (use-package dockerfile-mode :ensure t)

    (use-package ox-reveal
      :ensure t
      :init
      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))


    (use-package htmlize
      :ensure t)

    (use-package yaml-mode :ensure t)

    (use-package anaconda-mode
      :ensure t)

    (use-package docker-tramp
      :ensure t)
  #+END_SRC

* Helm

  Helm is an amazing completion tool for finding almost anything. We can
  replace many default functions with the helm equivalent.

  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :diminish helm-mode
      :bind (("C-x b" . helm-mini)
             ("C-x C-f" . helm-find-files)
             ("C-c h" . helm-command-prefix)
             ("M-x" . helm-M-x)
             ("M-y" . helm-show-kill-ring))

      :init
      (setq helm-quick-update                     t ; do not display invisible candidates
            helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
            helm-M-x-fuzzy-match                  t ; fuzzy matching M-x
            helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
            helm-recentf-fuzzy-match              t ; fuzzy matching recent files
            helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
            helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
            helm-ff-newfile-prompt-p            nil ; Don't prompt when I create a file
            helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
            helm-ff-file-name-history-use-recentf t)
      (when (executable-find "curl")
        (setq helm-google-suggest-use-curl-p t))

      :config
      ; When I haven't entered anything, backspace should get me out of helm
      (defun helm-backspace ()
        (interactive)
        (condition-case nil
            (backward-delete-char 1)
          (error
           (helm-keyboard-quit))))

      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
      (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
      (define-key helm-map (kbd "DEL") 'helm-backspace)

      (helm-mode 1))

    (use-package helm-ag
      :ensure t)

    (use-package helm-projectile
      :ensure t
      :config
      (helm-projectile-on))

    (use-package helm-spotify)
  #+END_SRC

  I'd like to easily run helm-occur on all buffers that are backed by files. ([[http://stackoverflow.com/questions/14726601/sublime-text-2s-goto-anything-or-instant-search-for-emacs][Source]])

  #+BEGIN_SRC emacs-lisp
    (defun aw/helm-do-grep-all-buffers ()
      "multi-occur in all buffers backed by files."
      (interactive)
      (helm-multi-occur-1
       (delq nil
             (mapcar (lambda (b)
                       (when (buffer-file-name b) (buffer-name b)))
                     (buffer-list)))))

  #+END_SRC

  When you press backspace in a helm buffer and there's nothing left to delete,
  helm will complain by saying ~Text is read only~. A much better default is to just
  close the buffer. ([[http://oremacs.com/2014/12/21/helm-backspace/][Source]])

  #+BEGIN_SRC emacs-lisp
  #+END_SRC

** helm-gtags
   
   #+BEGIN_SRC emacs-lisp
        (use-package helm-gtags
          :ensure t
          :diminish helm-gtags-mode
          :bind (("M-." . helm-gtags-dwim)
                 ("M-," . helm-gtags-pop-stack))
          :init
          (setq helm-gtags-ignore-case t
                helm-gtags-auto-update t
                helm-gtags-use-input-at-cursor t
                helm-gtags-pulse-at-cursor t
                helm-gtags-prefix-key "\C-cg"
                helm-gtags-suggested-key-mapping t)

          :config
          (add-hook 'dired-mode-hook 'helm-gtags-mode)
          (add-hook 'eshell-mode-hook 'helm-gtags-mode)
          (add-hook 'c-mode-hook 'helm-gtags-mode)
          (add-hook 'c++-mode-hook 'helm-gtags-mode)
          (add-hook 'asm-mode-hook 'helm-gtags-mode)

          (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
          (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
          (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
          (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))
   #+END_SRC
* Text Editing
** Buffer Management

   =Ibuffer= mode is a built-in replacement for the stock =BufferMenu=. It offers
   fancy things like filtering buffers by major mode or sorting by size. The
   [[http://www.emacswiki.org/emacs/IbufferMode][wiki]] offers a number of improvements.

   The size column is always listed in bytes. We can make it a bit more human
   readable by creating a custom column.

   #+BEGIN_SRC emacs-lisp
     ;; (eval-after-load 'ibuffer
     ;;   (define-ibuffer-column size-h
     ;;     (:name "Size" :inline t)
     ;;     (cond
     ;;      ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ;;      ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     ;;      (t (format "%8d" (buffer-size)))))

     ;;   ;; Modify the default ibuffer-formats
     ;;   (setq ibuffer-formats
     ;;         '((mark modified read-only " "
     ;;                 (name 18 18 :left :elide) " "
     ;;                 (size-h 9 -1 :right) " "
     ;;                 (mode 16 16 :left :elide) " "
     ;;                 filename-and-process))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-hook 'ibuffer-hook 'ibuffer-tramp-set-filter-groups-by-tramp-connection)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     ;; (fullframe ibuffer ibuffer-quit)
     (define-key custom-bindings-map (kbd "C-x C-b")  'ibuffer)
     (define-key custom-bindings-map (kbd "C-c r") 'rename-buffer)

     (evil-set-initial-state 'ibuffer-mode 'normal)
   #+END_SRC

** Editing Large Files

   =VLF-mode= allows me to open up huge files in batches, which is really useful when going through
   massive log files. Here I just require it so I have the option of using it. More configuration to follow.

   #+BEGIN_SRC emacs-lisp
     (use-package vlf
       :ensure t
       :config
       (require 'vlf-setup))
   #+END_SRC
* Programming
** Language Settings
*** FSP

    FSP (Finite state processes) is a notation that formally describes concurrent
    systems as described in the book Concurrency by Magee and Kramer. Someday
    I want to make a fully featured mode for FSP. Someone by the name of
    Esben Andreasen made a mode with basic syntax highlighting, so that will
    have to do for now.

    We'll add it manually until I have time to play around with it.

    #+BEGIN_SRC emacs-lisp
      ;; Load fsp-mode.el from its own directory
      ;; (add-to-list 'load-path "~/Dropbox/fsp-mode/")
      ;; (require 'fsp-mode)
    #+END_SRC
*** LaTeX

    =.tex=-files should be associated with =latex-mode= instead of
    =tex-mode=.

    #+BEGIN_SRC emacs-lisp
      (use-package latex-mode
       :mode "\\.tex\\'" )
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (evil-leader/set-key-for-mode 'latex-mode
        "at" 'tex-compile)

    #+END_SRC

*** Octave

    Make it so =.m= files are loaded in =octave-mode=.

    #+BEGIN_SRC emacs-lisp
      (use-package octave-mode
        :mode "\\.m$")
    #+END_SRC

*** Python

     [[http://tkf.github.io/emacs-jedi/released/][Jedi]] offers very nice auto completion for =python-mode=. Mind that it is
     dependent on some python programs as well, so make sure you follow the
     instructions from the site.

     #+BEGIN_SRC emacs-lisp
       (use-package jedi
         :init
         (setq jedi:complete-on-dot t))
       ;; (add-hook 'python-mode-hook 'jedi:setup)
       ;; (setq jedi:server-command
       ;;      (cons "python3" (cdr jedi:server-command))
       ;;      python-shell-interpreter "python3")

       ;;(add-hook 'python-mode-hook 'jedi:ac-setup)
     #+END_SRC


** CEDET
*** Semantic

    #+BEGIN_SRC emacs-lisp
      (require 'cc-mode)
      (require 'semantic)

      (global-semanticdb-minor-mode 1)
      (global-semantic-idle-scheduler-mode 1)

      (semantic-mode 1)
    #+END_SRC
*** function-args

    #+BEGIN_SRC emacs-lisp
      (use-package function-args
        :ensure t
        :diminish FA
        :config
        (fa-config-default)
        (define-key c-mode-map  [(control tab)] 'moo-complete)
        (define-key c++-mode-map  [(control tab)] 'moo-complete)
        (define-key c-mode-map (kbd "M-o")  'fa-show)
        (define-key c++-mode-map (kbd "M-o")  'fa-show))
    #+END_SRC

* System Stuff
** Terminals

   Multi-term makes working with many terminals a bit nicer. I can easily create
   and cycle through any number of terminals. There's also a "dedicated terminal"
   that I can pop up when needed.

   From the emacs wiki:

   #+BEGIN_SRC emacs-lisp
     (use-package multi-term :ensure t)           ; Better terminals

     (defun last-term-buffer (l)
       "Return most recently used term buffer."
       (when l
         (if (eq 'term-mode (with-current-buffer (car l) major-mode))
             (car l) (last-term-buffer (cdr l)))))

     (defun get-term ()
       "Switch to the term buffer last used, or create a new one if
         none exists, or if the current buffer is already a term."
       (interactive)
       (let ((b (last-term-buffer (buffer-list))))
         (if (or (not b) (eq 'term-mode major-mode))
             (multi-term)
           (switch-to-buffer b))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (setq multi-term-dedicated-select-after-open-p t)
   #+END_SRC

   Some modes don't need to be in the terminal.
   #+BEGIN_SRC emacs-lisp
     ;; (add-hook 'term-mode-hook (lambda()
     ;;                             (yas-minor-mode -1)))
   #+END_SRC

  #+BEGIN_SRC emacs-lisp
     (define-key custom-bindings-map (kbd "C-c t") 'multi-term-dedicated-toggle)
     (define-key custom-bindings-map (kbd "C-c T") 'get-term)
  #+END_SRC

   I'd like the =C-l= to work more like the standard terminal (which works
   like running =clear=), and resolve this by simply removing the
   buffer-content. Mind that this is not how =clear= works, it simply adds a
   bunch of newlines, and puts the prompt at the top of the window, so it
   does not remove anything. In Emacs removing stuff is less of a worry,
   since we can always undo!

   #+BEGIN_SRC emacs-lisp
     (defun clear-shell ()
       "Runs `comint-truncate-buffer' with the
     `comint-buffer-maximum-size' set to zero."
       (interactive)
       (let ((comint-buffer-maximum-size 0))
        (comint-truncate-buffer)))

     (add-hook 'shell-mode-hook (lambda () (local-set-key (kbd "C-l") 'clear-shell)))
   #+END_SRC
